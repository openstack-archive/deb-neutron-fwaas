[tox]
envlist = py34,py27,pep8,pylint
minversion = 1.6
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
         PYTHONWARNINGS=default::DeprecationWarning
usedevelop = True
install_command =
  {toxinidir}/tools/tox_install.sh {env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt} {opts} {packages}
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
whitelist_externals = sh find
commands =
  find . -type f -name "*.py[c|o]" -delete
  find . -type d -name "__pycache__" -delete
  sh tools/pretty_tox.sh '{posargs}'
# there is also secret magic in pretty_tox.sh which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:functional]
setenv = OS_TEST_PATH=./neutron_fwaas/tests/functional
commands =
  python setup.py testr --slowest --testr-args='{posargs}'

[testenv:api]
sitepackages=True
setenv =
 OS_TEST_PATH=./neutron_fwaas/tests/tempest_plugin/tests/api/
 OS_TESTR_CONCURRENCY=1
 TEMPEST_CONFIG_DIR={env:TEMPEST_CONFIG_DIR:/opt/stack/tempest/etc}
commands =
  python setup.py testr --slowest --testr-args='{posargs}'

[testenv:scenario]
sitepackages=True
setenv =
 OS_TEST_PATH=./neutron_fwaas/tests/tempest_plugin/tests/scenario/
 OS_TESTR_CONCURRENCY=1
 TEMPEST_CONFIG_DIR={env:TEMPEST_CONFIG_DIR:/opt/stack/tempest/etc}
commands =
  python setup.py testr --slowest --testr-args='{posargs}'

[testenv:dsvm-functional]
setenv =
  OS_TEST_PATH=./neutron_fwaas/tests/functional
  OS_SUDO_TESTING=1
  OS_ROOTWRAP_CMD=sudo {envdir}/bin/neutron-rootwrap {envdir}/etc/neutron/rootwrap.conf
  OS_ROOTWRAP_DAEMON_CMD=sudo {envdir}/bin/neutron-rootwrap-daemon {envdir}/etc/neutron/rootwrap.conf
  OS_FAIL_ON_MISSING_DEPS=1
whitelist_externals =
  sh
  cp
  sudo
commands =
  python setup.py testr --slowest --testr-args='{posargs}'

[testenv:releasenotes]
commands = sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:pep8]
commands =
  flake8
  {toxinidir}/tools/check_unit_test_structure.sh
  neutron-db-manage --subproject neutron-fwaas --database-connection sqlite:// check_migration
  {[testenv:genconfig]commands}
whitelist_externals = sh

[testenv:cover]
commands =
  python setup.py test --coverage --coverage-package-name=neutron_fwaas --testr-args='{posargs}'

[testenv:venv]
commands = {posargs}

[testenv:docs]
commands = python setup.py build_sphinx

[flake8]
# E125 continuation line does not distinguish itself from next logical line
# E126 continuation line over-indented for hanging indent
# E128 continuation line under-indented for visual indent
# E129 visually indented line with same indent as next logical line
# E265 block comment should start with ‘# ‘
# H405 multi line docstring summary not separated with an empty line
# TODO(marun) H404 multi line docstring should start with a summary
# TODO(dougwig) -- uncomment this to test for remaining linkages
# N530 direct neutron imports not allowed
ignore = E125,E126,E128,E129,E265,H404,H405,N530
show-source = true
exclude = .venv,.git,.tox,dist,doc,*lib/python*,.tmp,*egg,build,tools,.ropeproject,rally-scenarios

[testenv:pylint]
deps =
  {[testenv]deps}
  pylint
commands =
  pylint --rcfile=.pylintrc --output-format=colorized {posargs:neutron_fwaas}

[hacking]
import_exceptions = neutron_fwaas._i18n
local-check-factory = neutron_lib.hacking.checks.factory

[testenv:genconfig]
commands = {toxinidir}/tools/generate_config_file_samples.sh
